name: sandbox

on:
  push:
    tags:
      - prod

jobs:
  main:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1

      - name: Environment
        env:
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT_PROD }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        id: URI
        run: |
          export REPO=$(echo $GITHUB_REPOSITORY | sed 's/^.*\///g')
          export IMAGEURI="$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO"
          echo "::set-output NAME=IMAGE_URI::$IMAGEURI"

      - name: Get short SHA
        id: slug
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ steps.URI.outputs.IMAGE_URI }}
          tag-custom: ${{ steps.slug.outputs.sha8 }}
          tag-custom-only: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          build-args: |
            REACT_APP_BLOCKS_API=${{ secrets.REACT_APP_BLOCKS_API_PROD }}
            REACT_APP_SCAN_URL=${{ secrets.REACT_APP_SCAN_URL_PROD }}
            REACT_APP_TOKEN_AUTH=${{ secrets.REACT_APP_TOKEN_AUTH_PROD}}
            REACT_APP_CHAIN_CONTRACT=${{ secrets.REACT_APP_CHAIN_CONTRACT_PROD}}
            REACT_APP_SHOULD_FALLBACK=false

      - name: Push api
        uses: ianbelcher/eks-kubectl-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws_region: ${{ secrets.AWS_REGION }}
          cluster_name: ${{ secrets.CLUSTER_NAME_PROD }}
          args: set image --record deployment/taurus taurus="${{ steps.docker_meta.outputs.tags }}" --namespace prod
